#!/bin/sh /etc/rc.common

USE_PROCD=1
#Commenting start to ensure that service is started manually
#START=99  # Service startup order
STOP=99  # Service stop order
Name=onewifi_em_agent
VETH_BASE_IFACE="eth1" # Base interface for veth pair
VETH_AGENT_PEER="${VETH_BASE_IFACE}_virt_peer" # Peer interface for veth pair
BRIDGE_NAME="br-lan"
DELAY_BEFORE_AGENT_START=30 #Delay in seconds

# Process 2 configuration
PROG="/usr/bin/onewifi_em_agent"
PIDFILE="/tmp/em_agent.pid"

#Helper function for logging with timestamp
log_message() {
    # Get current uptime in seconds and hundredths (e.g., "12345.67")
    UPTIME_SECONDS_DECIMAL=$(cut -d' ' -f1 /proc/uptime)
    # Extract integer seconds and fractional part
    UPTIME_SECONDS=${UPTIME_SECONDS_DECIMAL%.*}
    UPTIME_FRACTION=${UPTIME_SECONDS_DECIMAL#*.}

    # Convert fraction to milliseconds (take first 3 digits, pad with zeros if needed)
    # This assumes UPTIME_FRACTION is at least 2 digits.
    # For robust padding if it's less than 3 digits:
    MILLISECONDS=$(printf "%-3.3s" "$UPTIME_FRACTION" | sed 's/ /0/g')
    echo "$(date "+%Y-%m-%d %H:%M:%S").${MILLISECONDS} - $@" >> /tmp/em_agent_log.txt
}

start_service() {
    log_message "em_agent script started, onewifi_em_agent to start after sleep..."
    sleep $DELAY_BEFORE_AGENT_START
    log_message "sleep done, em_agent starting..."

    procd_open_instance "onewifi_em_agent"
    procd_set_param command $PROG  # Command with arguments
    procd_set_param respawn 50 10 10  # Automatically restart if down
    procd_set_param limits core="unlimited"
    procd_set_param limits stack="unlimited"
    procd_set_param stdout 1 # forward stdout of the command to logd
    procd_set_param stderr 1 # same for stderr
    procd_set_param pidfile "$PIDFILE"
    procd_set_param delay $DELAY_BEFORE_AGENT_START # Wait before starting the command
    procd_close_instance

    log_message "onewifi_em_agent started."
}

stop_service() {
    log_message "Stopping onewifi_em_agent service..."
    # Stop the main process if it is running
    if [ -f $PIDFILE ]; then
        kill -9 "$(cat $PIDFILE)"  # Kill the process
        rm -f $PIDFILE         # Remove the PID file
    fi
}

restart_service() {
    log_message "Restart triggered for em_agent service..."
    stop
    start
}

reload_service() {
    log_message "Reload triggered for em_agent service..."
    stop
    start
}
